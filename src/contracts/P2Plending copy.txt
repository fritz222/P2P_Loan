//SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.7.4;
pragma experimental ABIEncoderV2;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/math/SafeMath.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "./helper/Calculations.sol";

contract P2PLending is ERC721("Embark Loan", "EMK") {

    
    using ABDKMath64x64 for uint256;
    using ABDKMath64x64 for uint128;
    using ABDKMath64x64 for uint;
    using ABDKMath64x64 for int128;
    // using ABDKMath64x64 for int;
    using SafeMath for uint256;
    using SafeMath for uint;



    struct Loan{
        uint loanId;   //NFT Id
        address borrower; // Address of borrower
        uint max_interest_rate;
        uint duration;
        uint principal_amount;
        uint principal_balance;
        uint amount_paid;
        uint startTime;
        uint yearly_payments;
        uint total_payments;
        Status status;
        bytes32 currency;
        address[] investors_index;
    }

    struct Investor{
        address investor_address;
        uint investor_amount;
        uint interest;
        bool paid_in;
        bool exists;
    }

    //Struct for supported tokens as payment
    struct Token {
        bytes32 ticker;
        address tokenAddress;
    }

    enum Status{
        Application,
        PayIn,
        Loan,
        Done
    }

    event newLoanStarted (uint256 indexed _id, address indexed _borrower);

    //Global counters, always increment, used as Id for NFT
    uint numLoans;
    address admin;

    mapping(uint => Loan) public loans;
    mapping (address => Investor) public investors;

    mapping (bytes32 => Token) public tokens;
    bytes32[] tokenList;

    mapping(address => mapping(bytes32 => uint)) public balances;

    constructor () {
        admin = msg.sender;
        numLoans = 0;
    }

    function addToken(
        bytes32 ticker,
        address tokenAddress)
        onlyAdmin()
        external {
        tokens[ticker] = Token(ticker, tokenAddress);
        tokenList.push(ticker);
    }

    // function deposit(uint amount) public{
    
    // }

    // function withdraw(uint amount) public returns (uint){
    //     return 0;
    // }

     function divisionTest(uint256 _a, uint256 _b) public pure returns (int128){
        int128 result;
        result =  0;
        result = _a.divu(_b);

        return result;
    }

    function calculateInterest(int128 q, int128 interest, int128 principal, uint256 n) public pure returns (int128){
        int128 result = 0;

        //int128 t1 = q.pow();
        result = principal.mul(q.pow(n).mul(interest.div(q.pow(n).sub(int128(1)))));

        return result;
    }


    function createLoanApplication(uint _duration, uint _max_interest_rate, uint _credit_amount, uint _yearly_payments, uint _total_payments, bytes32 _currency) public returns(uint256 loanId){ 
        require(tokens[_currency].tokenAddress != address(0));
        uint256 newId = numLoans.add(1);
        
        _mint(msg.sender, newId);
        Loan memory _loan;
        _loan.loanId = newId;
        _loan.borrower = msg.sender;
        _loan.max_interest_rate = _max_interest_rate;
        _loan.duration = _duration;
        _loan.principal_amount = _credit_amount;
        _loan.principal_balance =   _credit_amount;
        _loan.amount_paid =   0;
        _loan.startTime =  0;
        _loan.yearly_payments =  _yearly_payments;
        _loan.total_payments = _total_payments;
        _loan.status = Status.Application;
        _loan.currency = _currency;

        loans[newId] = _loan;
        numLoans = newId;
        return newId;
    }


    function writeLoanParams(uint _id, Investor[] memory _investors) public {
        require(loans[_id].loanId != 0, "LoanId doesnt exist!");
        
        //write Investors into Mapping
        for(uint i = 0; i < _investors.length; i++){
            address tempAd = _investors[i].investor_address;
            loans[_id].investors_index.push(tempAd);
            investors[tempAd] = _investors[i]; 
        }

        loans[_id].status = Status.PayIn;
    }

    function payIn (uint _id, bytes32 ticker, uint256 amount) public {
        require(investors[msg.sender].exists == true);
        require(investors[msg.sender].paid_in == false);
        require(investors[msg.sender].investor_amount == amount);
        address borrower = loans[_id].borrower;
        //transferFrom
        IERC20(tokens[ticker].tokenAddress).transferFrom(
            msg.sender,
            address(this),
            amount
        );
        balances[borrower][ticker] = balances[borrower][ticker].add(amount);
        investors[msg.sender].paid_in = true;
    }

    function checkAndStartLoan(uint256 _id) public returns (bool){
        address[] memory ia = loans[_id].investors_index;
        for(uint i = 0; i < ia.length; i++){
            if(investors[ia[i]].paid_in == false){
                return false;
            }
        }

        loans[_id].status = Status.Loan;
        loans[_id].startTime = block.timestamp;
        emit newLoanStarted(_id, loans[_id].borrower);
        return true;
    }


    function repayLoan(uint _id, uint amount, uint amountWithInterest, uint timeSinceLastPayment) public {
        //amount with interest: rest amount
        //First check if the payer has enough money
            // require(balances[msg.sender] >= amount);
            // require(loans[_id].borrower == msg.sender);
        //Find the loan
      
    }

    function getLoan(uint256 _id) public view returns (Loan memory){
       return loans[_id];
    }

    function getInvestor(address _investor_address) public view returns (Investor memory){
        return investors[_investor_address];
    }

     modifier onlyAdmin() {
        require(msg.sender == admin, 'only admin');
        _;
    }
    
}